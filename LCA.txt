class LCA {
	int n;
	int table[MXN][25];
	vec<int>(*e)[MXN];
	int dep[MXN];
public:
	void init(const int& size, vector<int>(&f)[MXN]) {
		n = size;
		e = &f;
		for (int i = 0; i <= n; i++) for (int j = 0; j < 25; j++)
			table[i][j] = -1;
	}
	void build(const int& st) {
		dfs(st, -1, 0);
		for (int j = 0; j < 24; j++)for (int i = 0; i <= n; i++) {
			if (table[i][j] > -1) table[i][j + 1] = table[table[i][j]][j];
		}
	}
	int get(int x, int y) {
		if (dep[x] > dep[y]) swap(x, y);
		for (int i = 24; i >= 0; i--) {
			if (((dep[y] - dep[x]) >> i) & 1) y = table[y][i];
		}
		if (x == y) return x;
		for (int i = 24; i >= 0; i--) {
			if (table[x][i] != table[y][i]) {
				x = table[x][i], y = table[y][i];
			}
		}
		return table[x][0];
	}
	int operator[](const int& x) const {
		return dep[x];
	}
private:
	void dfs(int v, int p, int d) {
		table[v][0] = p;
		dep[v] = d;
		for (auto& to : (*e)[v]) {
			if (to != p) dfs(to, v, d + 1);
		}
	}
};