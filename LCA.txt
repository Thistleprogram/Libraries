class LCA {
#define H pair<int, int>
#define fs first
#define sc second
    int n;
    H table[400000][25];
    vec<H>e[400000];
    int dep[400000];
public:
    void init(const int& size) {
        n = size;
        for (int i = 0; i <= n; i++) for (int j = 0; j < 25; j++)
            table[i][j] = H{ -1,-1 };
    }
    void add_edge(int u, int v, int r) {
        e[u].pb(H{ v,r });
        e[v].pb(H{ u,r });
    }
    void add_edge(int u, int v) {
        e[u].pb(H{ v,1 });
        e[v].pb(H{ u,1 });
    }
    void build(const int st) {
        dfs(st, -1, 0);
        for (int j = 0; j < 24; j++)for (int i = 0; i <= n; i++) {
            if (table[i][j].fs > -1) table[i][j + 1] = H{ table[table[i][j].fs][j].fs, table[i][j].sc + table[table[i][j].fs][j].sc };
        }
    }
    H get(int x, int y) {
        if (dep[x] > dep[y]) swap(x, y);
        int sum = 0;
        for (int i = 24; i >= 0; i--) {
            if (((dep[y] - dep[x]) >> i) & 1) {
                sum += table[y][i].sc;
                y = table[y][i].fs;
            }
        }
        if (x == y) return H{ x,sum };
        for (int i = 24; i >= 0; i--) {
            if (table[x][i].fs != table[y][i].fs) {
                sum += table[x][i].sc + table[y][i].sc;
                x = table[x][i].fs, y = table[y][i].fs;
            }
        }
        return H{ table[x][0].fs, sum + table[x][0].sc + table[y][0].sc };
    }
    int operator[](const int& x) const {
        return dep[x];
    }
private:
    void dfs(int v, int p, int d) {
        table[v][0] = H{ p,-1 };
        dep[v] = d;
        for (auto& to : e[v]) {
            if (to.fs != p) dfs(to.fs, v, d + 1);
            else table[v][0].sc = to.sc;
        }
    }
};