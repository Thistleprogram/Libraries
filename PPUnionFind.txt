
class PPUnionFind {
	int par[500010], last[500010];
	vec<H>history[500010];
public:
	void init(int n) {
		for (int i = 0; i <= n; i++) {
			par[i] = -1; last[i] = -1;
			history[i].pp(-1, -1);
		}
	}
	int root(int t, int x) {
		if (last[x] == -1 || t < last[x]) return x;
		return root(t, par[x]);
	}
	bool same(int t, int x, int y) {
		return root(t, x) == root(t, y);
	}
	void merge(int t, int x, int y) {
		x = root(t, x); y = root(t, y);
		if (x == y) return;
		if (par[x] > par[y]) swap(x, y);
		par[x] += par[y];
		par[y] = x;
		last[y] = t;
		history[x].pp(t, par[x]);
	}
	int size(int t, int x) {
		x = root(t, x);
		return -prev(lower_bound(history[x].begin(), history[x].end(), make_pair(t, 0)))->second;
	}
};