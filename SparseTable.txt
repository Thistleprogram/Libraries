template<typename T>
class sptable {
    vector<T>a; vector<int>log;
    vector<vector<int>>table;
    int n;
    using F = function<T(T, T)>;
    F func;
public:
    sptable() {}
    sptable(vector<T>& b, F comp) :a(b), n(b.size()), func(comp) {
        log.resize(n + 1);
        for (int i = 2; i <= n; i++) log[i] = log[i >> 1] + 1;

        table.assign(log[n] + 1, vector<int>(n));

        for (int i = 0; i < n; i++) table[0][i] = i;

        for (int k = 1; (1 << k) <= n; k++) {
            for (int i = 0; i + (1 << k) <= n; i++) {
                int c = table[k - 1][i];
                int d = table[k - 1][i + (1 << (k - 1))];
                if (func(a[c], a[d]) == a[c]) table[k][i] = c;
                else table[k][i] = d;
            }
        }
    }
    template<typename Iterator>
    sptable(const Iterator a, const Iterator b, F comp) {
        vector<T>c;
        for (auto k = a; k != b; k++) {
            c.push_back(*k);
        }
        *this = sptable(c, comp);
    }
    //[s,t)
    int query(int s, int t) {
        int d = t - s, k = log[d];
        if (func(a[table[k][s]], a[table[k][t - (1 << k) + 1]]) == a[table[k][s]])
            return table[k][s];
        else return table[k][t - (1 << k) + 1];
    }
    T num(int s, int t) {
        return a[query(s, t)];
    }
};