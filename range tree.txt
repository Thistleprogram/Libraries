template<typename T>class segtree {
    int n, sz;
    T zer;
    vector<T>node;
    using F = function<T(T, T)>;
    F func;
public:
    void init(const vector<T>& v, F comp, T zero) {
        func = comp;
        zer = zero;
        sz = (int)v.size();
        n = 1;
        while (n < sz) n *= 2;
        node.assign(2 * n, zero);
        for (int i = 0; i < sz; i++) node[i + n] = v[i];
        for (int i = n - 1; i >= 1; i--) node[i] = func(node[2 * i], node[2 * i + 1]);
    }
    void add(int k, const T a) {
        node[k += n] = a;
        while (k >>= 1) node[k] = func(node[2 * k], node[2 * k + 1]);
    }
    T query(int a, int b) {
        T res1 = zer, res2 = zer;
        a += n; b += n;
        while (a != b) {
            if (a % 2) res1 = func(res1, node[a++]);
            if (b % 2) res2 = func(res2, node[--b]);
            a >>= 1; b >>= 1;
        }
        return func(res1, res2);
    }
};
template<typename CT, typename VT>class RangeTree {
    using pcc = pair<CT, CT>;
    using pci = pair<CT, int>;
    using F = function<VT(VT, VT)>;
    F func;
    VT zer;
    int n, sz;
    vector<segtree<VT>>seg;
    //y座、x座
    vector<vector<pcc>>yx;
    
    vector<pcc>sorted;

    void update(int id, const CT x, const CT y, const VT val) {
        id += n - 1;
        const int yid = lower_bound(all(yx[id]), pcc(y, x)) - yx[id].begin();
        seg[id].add(yid, val);
        while (id > 0) {
            id = (id - 1) / 2;
            const int yid = lower_bound(all(yx[id]), pcc(y, x)) - yx[id].begin();
            seg[id].add(yid, val);
        }
    }
    VT query(const int lxid, const int rxid, const CT ly, const CT ry, const int k, const int l, const int r) {
        if (r <= lxid || rxid <= l) return zer;
        if (lxid <= l && r <= rxid) {
            const int lyid = lower_bound(all(yx[k]), pcc(ly, numeric_limits<CT>::min())) - yx[k].begin();
            const int ryid = lower_bound(all(yx[k]), pcc(ry, numeric_limits<CT>::min())) - yx[k].begin();
            return (lyid >= ryid) ? zer : seg[k].query(lyid, ryid);
        }
        else return func(query(lxid, rxid, ly, ry, 2 * k + 1, l, (l + r) / 2), query(lxid, rxid, ly, ry, 2 * k + 2, (l + r) / 2, r));
    }
public:
    RangeTree(const vector<pcc>& cand, const vector<VT>& val,F comp, VT zero) :n(1), sz((int)cand.size()), sorted(sz) {
        func = comp;
        zer = zero;
        while (n < sz) n *= 2;
        for (int i = 0; i < sz; i++) sorted[i] = { cand[i].first, i };
        sort(all(sorted), [&](const pcc& a, const pcc& b) {
            return (a.first == b.first) ? (cand[a.second].second < cand[b.second].second) : (a.first < b.first);
            });

        yx.resize(2 * n - 1); seg.resize(2 * n - 1);
        for (int i = 0; i < sz; i++) {
            yx[i + n - 1] = { {sorted[i].second, sorted[i].first} };
            vector<VT>arg = { val[sorted[i].second] };
            seg[i + n - 1].init(arg,func,zer);
            sorted[i].second = cand[sorted[i].second].second;
        }
        for (int i = n - 2; i >= 0; i--) {
            yx[i].resize(int(yx[i * 2 + 1].size()) + int(yx[i * 2 + 2].size()));
            if (yx[i].empty()) continue;

            merge(all(yx[i * 2 + 1]), all(yx[i * 2 + 2]), yx[i].begin(), [&](const pcc& a, const pcc& b) {
                return (cand[a.first].second == cand[b.first].second)
                    ? (a.second < b.second) : (cand[a.first].second < cand[b.first].second);
                });
            vector<VT>arg(int(yx[i].size()));
            for (int j = 0; j < (int)yx[i].size(); j++) {
                arg[j] = val[yx[i][j].first];
            }
            seg[i].init(arg,func,zer);
        }
        for (int i = 0; i < 2 * n - 1; i++) {
            for (pcc& e : yx[i]) e.first = cand[e.first].second;
        }
    }
    void update(const CT x, const CT y, const VT val) {
        const int id = lower_bound(all(sorted), pcc(x, y)) - sorted.begin();
        return update(id, x, y, val);
    }
    VT query(const CT lx, const CT ly, const CT rx, const CT ry) {
        const int lxid = lower_bound(all(sorted), pcc(lx, numeric_limits<CT>::min())) - sorted.begin();
        const int rxid = lower_bound(all(sorted), pcc(rx, numeric_limits<CT>::min())) - sorted.begin();
        return (lxid >= rxid) ? zer : query(lxid, rxid, ly, ry, 0, 0, n);
    }
};