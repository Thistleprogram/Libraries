class BitVec {
    int n;
    vector<int>b;//1の個数を持っています
public:
    BitVec() { n = 0; }
    BitVec(vector<bool>& v) { init(v); }
    void init(vector<bool>& v) {
        n = b.size() + 1;
        b.assign(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            b[i] = v[i - 1] + b[i - 1];
        }
    }
    //[0,t)
    int rank1(int t) {
        return b[t];
    }
    //[0,t)
    int rank0(int t) {
        return t - rank1(t);
    }
};
template<typename T> class WaveletMatrix {
    //size, char size
    int n, m;
    BitVec bv[60];
    vector<int>pos;
    bool get(const T val, const int t) {
        return (val >> (m - t - 1)) & 1;
        //valのi bit目の値を返す(上から)
    }
public:
    WaveletMatrix() {}
    void init(int n, string s) {
        vector<T>v(s.size());
        for (int i = 0; i < n; i++) {
            if ('a' <= s[i] && s[i] <= 'z') v[i] = T(s[i] - 'a');
            else v[i] = T(s[i] - 'A' + 26);
        }
        init(n, 52, v);
    }
    void init(int n, int sigma, vector<T>& v) {
        m = *max_element(v.begin(), v.end());
        int tmp = 0;
        while (m > 0) tmp++, m /= 2;
        m = tmp;

        for (int i = 0; i < m; i++) {
            vector<bool>b(v.size(), 0);
            for (int j = 0; j < n; j++)
                b[j] = get(v[j], i);
            bv[i].init(b);

            auto it = stable_partition(v.begin(), v.end(), [&](T c) {
                return !get(c, i);
                });
            pos[i] = it - v.begin();
        }
    }
    //val of [l,r)
    int rank(T val, int l, int r) {
        return rank(val, r) - rank(val, l);
    }
    //val of [0,i)
    int rank(T val, int i) {
        int p = 0;
        for (int j = 0; j < m; j++) {
            if (get(val, j)) {
                p = pos[j] + bv[j].rank1(p);
                i = pos[j] + bv[j].rank1(i);
            }
            else {
                p = bv[j].rank0(p);
                i = bv[j].rank0(i);
            }
        }
        return i - p;
    }
private:
    //今見ている区間、値の範囲、今見ている値の範囲、深さ
    int rangefreq(int i, int j, T a, T b, T l, T r, int x) {
        if (i == j || b <= l || r <= a) return 0;
        if (a <= l && r <= b) return j - i;
        else {
            T mid = (l + r) >> 1;
            int left = rangefreq(bv[x].rank0(i), bv[x].rank0(j), a, b, l, mid, x + 1);
            int right = rangefreq(pos[x] + bv[x].rank1(i), pos[x] + bv[x].rank1(j), a, b, mid, r, x + 1);
            return left + right;
        }
    }
public:
    //[l,r)*[a,b)
    int rangefreq(int l, int r, T a, T b) {
        return rangefreq(l, r, a, b, 0, 1ll << m, 0);
    }
};
