class UnionFind {
#define H pair<int, int>
#define fs first
#define sc second
public:
	int size = 0;
	H pa[500000];
	void init(int n) {
		size = n;
		for (int i = 0; i <= size; i++) pa[i] = H{ i,1 };
	}
	int root(int x) {
		if (pa[x].fs == x) return x;
		return pa[x].fs = root(pa[x].fs);
	}
	void unite(int x, int y) {
		x = root(x); y = root(y);
		if (pa[x].sc < pa[y].sc) swap(x, y);
		if (x == y) return;
		pa[x].sc += pa[y].sc;
		pa[y].fs = x;
	}
	bool same(int x, int y) {
		return root(x) == root(y);
	}
	H operator[](int x) {
		x = root(x);
		return pa[x];
	}
};