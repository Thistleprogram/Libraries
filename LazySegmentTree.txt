template<class T>
class LazySegmentTree {
protected:
    using UPF = function<void(T&)>;
    using QRF = function<void(T&, const T)>;
    using F = function<bool(T a)>;
    int n, rr;
    vector<T>dat;
    T e;

    LazySegmentTree() {}
    LazySegmentTree(int size) { init(size); }
    LazySegmentTree(vector<T>& v) {
        init(v);
    }
    virtual ~LazySegmentTree() {}

    virtual void eval(T& par, T& a,T& b) = 0;
    virtual T proc(const T& a, const T& b) = 0;

public:
    void init(int size) {
        n = size, rr = 1;
        while (rr < n) rr <<= 1;
        dat.assign(2 * rr - 1, T());
        for (int i = rr - 2; i >= 0; i--)
            dat[i] = proc(dat[i * 2 + 1], dat[i * 2 + 2]);
    }
    void init(vector<T>& v) {
        n = v.size(), rr = 1;
        while (rr < n) rr <<= 1;
        dat.assign(2 * rr - 1, T());
        for (int i = 0; i < n; i++)
            dat[i + rr - 1] = v[i];
        for (int i = rr - 2; i >= 0; i--)
            dat[i] = proc(dat[i * 2 + 1], dat[i * 2 + 2]);
    }
    //one point update
    void set(int at, T x) {
        update(0, at, at + 1, 0, rr, [x](T& a) {a = x; });
    }
    void upd(int a, int b, UPF func) {
        upd(0, a, b, 0, rr, func);
    }
    T qry(int a, int b) {
        return qry(0, a, b, 0, rr);
    }
    T get0() {
        return dat[0];
    }
    //func([a,i))==true, func([a,i+1))==false
    int lb(int a, int b, F func) {
        e = T();
        return lb(0, a, b, 0, rr, func, e);
    }
    //func([i,b))==true, func([i-1,b))==false
    int ub(int a, int b, F func) {
        e = T();
        return ub(0, a, b, 0, rr, func, e);
    }
private:
    void upd(int i, const int& a, const int& b, int l, int r, UPF& func) {
        if (b <= l || r <= a) return;
        if (a <= l && r <= b) {
            func(dat[i]);
            return;
        }

        eval(dat[i], dat[i * 2 + 1], dat[i * 2 + 2]);

        upd(i * 2 + 1, a, b, l, (l + r) / 2, func);
        upd(i * 2 + 2, a, b, (l + r) / 2, r, func);

        dat[i] = proc(dat[i * 2 + 1], dat[i * 2 + 2]);
    }
    T qry(int i, const int& a, const int& b, int l, int r) {
        if (b <= l || r <= a) return T();
        if (a <= l && r <= b) return dat[i];
        
        eval(dat[i], dat[i * 2 + 1], dat[i * 2 + 2]);

        return proc(qry(i * 2 + 1, a, b, l, (l + r) / 2),
            qry(i * 2 + 2, a, b, (l + r) / 2, r));
    }
    int lb(int i, int a, int b, int l, int r, F& func, T& wa) {
        if (b <= l || r <= a) return b;
        if (a <= l && r <= b) {
            if (func(proc(wa, dat[i]))) {
                wa = proc(wa, dat[i]);
                return b;
            }
            if (r - l == 1) return l;
        }
        eval(dat[i], dat[i * 2 + 1], dat[i * 2 + 2]);

        int tmp = lb(i * 2 + 1, a, b, l, (l + r) / 2, func, wa);
        if (tmp < b) return tmp;
        return lb(i * 2 + 2, a, b, (l + r) / 2, r, func, wa);
    }
    int ub(int i, int a, int b, int l, int r, F& func,T& wa) {
        if (b <= l || r <= a) return a;
        if (a <= l && r <= b) {
            if (func(proc(dat[i], wa))) {
                wa = proc(dat[i], wa);
                return a;
            }
            if (r - l == 1) return r;
        }
        eval(dat[i], dat[i * 2 + 1], dat[i * 2 + 2]);

        int tmp = ub(i * 2 + 2, a, b, (l + r) / 2, r, func,wa);
        if (tmp > a) return tmp;
        return ub(i * 2 + 1, a, b, l, (l + r) / 2, func, wa);
    }
};
template<class T>
class Segtree :public LazySegmentTree<T> {
    using Base = LazySegmentTree<T>;
public:
    Segtree() {}
    Segtree(int size) :Base(size) {}
    Segtree(vector<ll>& v) {
        init(v);
    }
    void init(int size) {
        Base::init(size);
    }
    void init(vector<ll>& v) {
        vector<T>r(v.size());
        for (int i = 0; i < v.size(); i++) r[i] = T{ v[i],inf,1 };
        Base::init(r);
    }

    void update(int a, int b, ll x) {
        Base::upd(a, b, [x](T& a) {
            a.val = x; a.lazy = x;
            });
    }
    ll query(int a, int b) {
        return Base::qry(a, b).val;
    }
private:
    void eval(T& par, T& a, T& b)override {
        /*if (par.lazy != inf) {
            a.val = par.lazy;
            a.lazy = par.lazy;
            b.val = par.lazy;
            b.lazy = par.lazy;
        }
        par.lazy = inf;*/
    }
    T proc(const T& a, const T& b)override {
        return T{ a.val + b.val ,inf,a.len + b.len };
    }
};
struct Monoid {
    ll val, lazy, len;
    Monoid() :val(0), lazy(inf), len(1) {}
    Monoid(ll val, ll lazy, ll len) :val(val), lazy(lazy), len(len) {}
};